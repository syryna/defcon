<%- include('partials/header') -%>

<% if (flavor == 'mobile') { %>

<% } else {%> 
    <%- include('partials/pageMenu') -%>
<%}%> 

<%- include('partials/containers') -%>

<script src="/scripts/helpers.js"></script>

<div id="map_container"></div>

<script>

/* Global Variables 
---------------------------------------------------------------------------------------------------------------------------------------
*/
const socket    = io({
  query: {
    uid: "<%= discordId %>",
    username: "<%= username %>",
    region: "<%= query %>"
  }
});
const w         = $('#map_container').width();
const h         = $('#map_container').height();
var menu_height = $('nav').outerHeight();
const region    = "<%= query %>";
var region_name = '';

const user  = {
    "uid":              "<%= discordId %>",
    "username":         "<%= username %>",
    "discriminator":    "<%= discriminator %>",
    "avatar":           "<%= avatar %>",
    "type":             "<%= type %>"
}

var alert_data      = [];
var alert_act_data  = [];
var sys_reg_data    = [];
var move_alert      = [];

var user_map_settings = {
    "region": region,
    "zoomTrans": {
        "x": 0,
        "y": 0,
        "scale": 1
    },
    "show_label": 1,
    "show_message_box": 0,
    "show_legend": 0,
    "show_tooltips": 1,
    "show_trails": 1
}

var user_settings = {
    "discordId": "<%= discordId %>",
    "username_original": "<%= username %>",
    "username": null,
    "stars": 0,
    "revert_y_axis": false,
    "home_base": "319-3D",
    "jump_range": 5,
    "audio_alerts": false
}

// system repositioning
var x = 0;
var y = 0;
var last_clicked_id = '';
var last_clicked_sys = {};
/* --------------------------------------------------------------------------------------------------------------------------------- */


/* Load SVG and handle all SVG related events
---------------------------------------------------------------------------------------------------------------------------------------
*/
var xml = d3.xml('/media/<%= query %>.svg').mimeType('image/svg+xml').get(function(error, data) {               
    if (error) throw error;

    // Append SVG content to container
    d3.select('#map_container').node().append(data.documentElement);

    // different SVG selectors
    const svg           = d3.select('svg');
    const background    = d3.select('[data-node-type=background]');
    const path          = d3.selectAll('path');
    const circle        = d3.selectAll('circle[data-node-type="solar_system"]');

    // constants
    const max_out       = 0.2;
    const max_in        = 2.0;
    // const svg_w         = svg.attr('data-width');
    // const svg_h         = svg.attr('data-height');
    const svg_w         = background.node().getBBox().width;
    const svg_h         = background.node().getBBox().height;
    const trans_x       = (w - (svg_w)*max_out)/2; 
    const trans_y       = (h - (svg_h)*max_out)/2;

    // build text boxes for the solar system names
    var text = [];
    d3.selectAll('[data-node-type="solar_systems"] > g > text').attr('x', function(d,i){
        text.push({text:d, pos:i, el: d3.select(this)});
        return d3.select(this).attr('x');
    });
    d3.selectAll('[data-node-type="solar_systems"] > g').data(text).insert('rect')
        .attr('x', function(d){ 
            return d.el.node().getBBox().x - 5}
            )
        .attr('y', function(d){
            return d.el.node().getBBox().y }
            )
        .attr('width', function(d){
            return d.el.node().getBBox().width + 10}
            )
        .attr('height', function(d){
            return d.el.node().getBBox().height }
            )
        .style('stroke', 'gray')
        .style('fill', '#000000')
        .style("fill-opacity", 0.5);

    // add popover and tooltip to all solar systems in the current region
    $('circle[data-node-type="solar_system"]').each(function (index){
        content = createPopoverHeader($(this));  
        $(this).attr("data-content", content);
        $(this).popover({ 
            trigger: 'manual', 
            container: 'body', 
            placement:'bottom', 
            title: '', 
            content: content,
            html: true, 
            sanitize: false, 
            template: $('#popover_template').html()
        });
        $(this).tooltip({ 
            trigger: 'manual', 
            container: 'body', 
            placement:'top', 
            title:'dummy', 
            html: true, 
            sanitize: false, 
            template : $('#tooltip_template').html()
        });
    });

    // SVG related events
    var zoom = d3.zoom()                                                            // Zoom handling - https://www.freecodecamp.org/news/get-ready-to-zoom-and-pan-like-a-pro-after-reading-this-in-depth-tutorial-5d963b0a153e/   
        .scaleExtent([max_out, max_in])                            
        .on('zoom', function(){
            var transform = d3.event.transform;
            user_map_settings.zoomTrans.x = transform.x;
            user_map_settings.zoomTrans.y = transform.y;
            user_map_settings.zoomTrans.scale = transform.k;  

            if (user_settings.revert_y_axis == true){
                transform.y = -transform.y;
                background.attr('transform', transform.toString());                                 
                transform.y = -transform.y;
            } else {      
                background.attr('transform', transform.toString());                                 
            }        

            $('[data-node-type="solar_system"]').popover('update');
            $('[data-node-type="solar_system"]').tooltip('update');
            //console.log(transform);

        });
    svg.call(zoom);

    svg.transition().call(zoom.transform, d3.zoomIdentity.translate(trans_x,trans_y).scale(max_out)); // initial centering

    svg.on("dblclick.zoom", null);                                                  // deaktivate doubleclick
    
    path.on('click', function(){                                                    // clicks on paths
        resetUI();
    })
 
    circle.on('click', function(){                                                  // clicks on circles
        if (typeof move_alert[0] !== "undefined"){
            const source_msg_id     = move_alert[0]._id;
            const source_id         = move_alert[0].message.id;
            const target_id         = $(this).attr("data-node-id");
            const target_name       = $(this).attr("data-node-name");

            move_alert[0].message.discordId     = user.uid;
            move_alert[0].message.avatar        = user.avatar;
            move_alert[0].message.username      = user.username;
            move_alert[0].message.discriminator = user.discriminator;
            move_alert[0].message.stars         = user_settings.stars;
            move_alert[0].message.id            = target_id;
            move_alert[0].message.system        = target_name;
            move_alert[0].message.predecessors.push(source_id);

            const msg = move_alert[0].message;
            const msg_id = move_alert[0]._id;

            socket.emit('MOVE_MSG', source_msg_id, msg, user.username);
            removeDrag();
            refreshTooltips(target_id);
            refreshTooltips(source_id);
            last_clicked_id = target_id;
        } else {
            var sys_sec         = $(this).attr("data-node-sec");
                sys_sec         = parseFloat(sys_sec);
                sys_sec         = sys_sec.toFixed(2);
            const sys_name      = $(this).attr("data-node-name");
            const sys_id        = $(this).attr("data-node-id");
            const solar_sys_x   = $(this).attr("cx");
            const solar_sys_y   = $(this).attr("cy");  

            resetUI();
            fillSidebar(sys_id, sys_name, sys_sec);
            addSelector(sys_id, solar_sys_x, solar_sys_y);
            showPopover($(this)); 
            last_clicked_id = sys_id;
        }            
    });

    $('#zoom_reset').on('click', function() {                                       // Reset zoom
        const trans_x = (w - (svg_w)*max_out)/2; 
        const trans_y = (h - (svg_h)*max_out)/2;
        svg.transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(trans_x,trans_y).scale(max_out));      
        
    });

    $('#center').on('click', function() {                                           // Center
        const trans_x = (w - (svg_w)*user_map_settings.zoomTrans.scale)/2; 
        const trans_y = (h - (svg_h)*user_map_settings.zoomTrans.scale)/2;
        svg.transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(trans_x,trans_y).scale(user_map_settings.zoomTrans.scale));
    });

    $('#zoom_in').on('click', function() {                                          // Zoom in
        const scale = 1.2;

        svg.transition().duration(0).call(zoom.transform, d3.zoomIdentity.translate(user_map_settings.zoomTrans.x * scale, user_map_settings.zoomTrans.y * scale).scale(user_map_settings.zoomTrans.scale * scale));
        //svg.transition().call(zoom.scaleBy, 1.2);
    });

    $('#zoom_out').on('click', function() {                                           // Zoom out
        const scale = 0.8;
        svg.transition().duration(0).call(zoom.transform, d3.zoomIdentity.translate(user_map_settings.zoomTrans.x * scale, user_map_settings.zoomTrans.y * scale).scale(user_map_settings.zoomTrans.scale * scale));
    });

    $('circle[data-node-type="solar_system"]').on("mouseenter", function(e) {       // mouse enter during dragging
        if (typeof move_alert[0] !== "undefined") { 
            var sys_id = $(e.target).attr("data-node-id");
            var solar_sys_x = $(e.target).attr("cx");
            var solar_sys_y = $(e.target).attr("cy");
            addSelector(sys_id, solar_sys_x, solar_sys_y);
        }
    });

    $('circle[data-node-type="solar_system"]').on("mouseleave", function(e) {       // mouse leave during dragging
        if (typeof move_alert[0] !== "undefined") { 
            resetUI();
        }
    });

    document.onkeydown = function(evt) {                                        // events for key press (ESC and arrow keys and ENTER)
        evt = evt || window.event;
        if (evt.keyCode == 27) {
            resetUI();
            removeDrag();
        }
        if (user.type < 1){
            if (evt.keyCode == 37) {  
                correctSystem("left");
            }
            if (evt.keyCode == 38) {
                correctSystem("up");
            }
            if (evt.keyCode == 39) {
                correctSystem("right");
            }
            if (evt.keyCode == 40) {
                correctSystem("down");
            }
            if (evt.keyCode == 13) {
                $('#message').html(JSON.stringify(last_clicked_sys, undefined, 2));
                $('#correct_modal').modal('show');
            }
        }
    };

    $('#correct_send').on('click', function(event) {                            // send correction data to server
            event.preventDefault();
            var msg = JSON.parse($('#message').html());
            if ($("#right_check").prop("checked") == true){
                msg.label = 'right';
            } else {
                msg.label = 'left';
            }
            console.log(msg);
            socket.emit('COORDS', msg, user.type);                                                  
            $("#right_check").prop("checked", false);
            $('#correct_modal').modal('toggle');
            
        });

    $('#search_send').on('click', function(event) {                             // Search
        event.preventDefault();
        var search_value = $("#autocomplete").val(); 
        var item_found = sys_reg_data.filter(n => n.name === search_value);  

        if (item_found.length == 0){
            $(".modal-footer").html('<span class="text-danger font-weight-bolder">System not found in whole Universe !</span>');
        } else {
            if (item_found[0].region_id != region){
                $(".modal-footer").html('<span class="text-danger font-weight-bolder">System "' + item_found[0].name + '" is in region "' + getRegionNameFromId(item_found[0].region_id) + '"!</span>');
            } else {
                const target = $('circle[data-node-id="' + item_found[0].id + '"]');
                const sys_id = item_found[0].id
                const solar_sys_x = target.attr("cx");
                const solar_sys_y = target.attr("cy");

                resetUI();
                addSelector(sys_id, solar_sys_x, solar_sys_y);

                const trans_x = (w/2) - (solar_sys_x*user_map_settings.zoomTrans.scale); 
                const trans_y = (h/2) - (solar_sys_y*user_map_settings.zoomTrans.scale);
                svg.transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(trans_x,trans_y).scale(user_map_settings.zoomTrans.scale));

                $("#autocomplete").val('');
                $('#search_modal').modal('toggle');
            }
        }
    });

    // modal initializations during show and hide
    $('.modal').on('show.bs.modal', function (e) {

    });
    $('.modal').on('hide.bs.modal', function (e) {
        $(".modal-footer").html('');
    });

    $("#save_map_settings, #device_toggle").on('inserted.bs.tooltip', function () {
        $("body div.tooltip-inner").css("max-width", "500px");
    });

    $('#user_settings').on('click', function() {                             // open user settings modal
        $('#display_name').val(user_settings.username);
        $('#stars').val(user_settings.stars);
        $('#stars_visual').html(stars(user_settings.stars));
        $('#revert_y_axis').prop('checked', user_settings.revert_y_axis);
        $('#settings_autocomplete').val(user_settings.home_base);
        $('#jump_range').val(user_settings.jump_range);
        $('#audio_alert').prop('checked', user_settings.audio_alert);
        $('#user_settings_modal').modal('toggle');
    });

    socket.on('SEND_MAP_SETTINGS', function(settings){                                  //recieving map settings
        if (typeof settings[0] !== 'undefined'){
            user_map_settings = settings[0].settings;
            if(settings[0].settings.show_label == 1){
                user_map_settings.show_label = 0;
                toggleLabels($('#toggle_labels'));
            }
            if(settings[0].settings.show_label == 0){
                user_map_settings.show_label = 1;
                toggleLabels($('#toggle_labels'));
            }
            if(settings[0].settings.show_legend == 1){
                showLegend();
            }
            if(settings[0].settings.show_legend == 0){
                hideLegend();
            }
            if(settings[0].settings.show_message_box == 1){
                showMessageBox()
            }
            if(settings[0].settings.show_message_box == 0){
                hideMessageBox()
            }
            if(settings[0].settings.show_tooltips == 1){
                showTooltips()
            }
            if(settings[0].settings.show_tooltips == 0){
                hideTooltips()
            }
            if(settings[0].settings.show_trails == 1){
                showTrails()
            }
            if(settings[0].settings.show_trails == 0){
                hideTrails()
            }
            svg.transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(user_map_settings.zoomTrans.x,user_map_settings.zoomTrans.y).scale(user_map_settings.zoomTrans.scale));
        }
    });
});
/* --------------------------------------------------------------------------------------------------------------------------------- */







/* Document ready functions which are executed once the page is loaded 
---------------------------------------------------------------------------------------------------------------------------------------
*/
$(function() {

    /* Initialization 
    ---------------------------------------------------------------------------------------------------------------------------------------
    */
    $('.nav-item').removeClass('active');                                       // deactivate 'active' from menu on all item
    $('#intel').addClass('active');                                             // set 'active' to current menu item

    $('path[data-node-rid="' + region + '"]').css("fill","#1c2c3d");            // Color Region

    $('button').tooltip();                                                      // assign tooltip to buttons
    $('[role=button]').tooltip();                                               // assign tooltip to buttons

    if ($('nav').length){                                                       // position map buttons related to navbar
        $("#map_buttons").stop().animate({top: menu_height + 10 + 'px'});
        $("#user_buttons").stop().animate({top: menu_height + 50 + 'px'});
    } else {
        $("#map_buttons").stop().animate({top: 10 + 'px'});
        $("#user_buttons").stop().animate({top: 50 + 'px'});
    }
    
    var input = document.getElementById("autocomplete");                        // Autocomplete for Search Modal
    autocomplete({
        input: input,
        emptyMsg: "No System found, try again",
        preventSubmit: true,
        disableAutoSelect: true,
        fetch: function(text, update) {
            text = text.toLowerCase();
            var suggestions = sys_reg_data.filter(n => n.name.toLowerCase().includes(text));                   // data structure: {_id: "5fb7ed7de4781119eced07f5", id: 30000101, name: "Uhtafal", region_id: 10000001, region_name: "Derelik"}
            update(suggestions);
        },
        onSelect: function(item) {
            input.value = item.name;
        }
    });
    var input2 = document.getElementById("settings_autocomplete");                        // Autocomplete for Search Modal
    autocomplete({
        input: input2,
        emptyMsg: "No System found, try again",
        preventSubmit: true,
        disableAutoSelect: true,
        fetch: function(text, update) {
            text = text.toLowerCase();
            var suggestions = sys_reg_data.filter(n => n.name.toLowerCase().includes(text));                   // data structure: {_id: "5fb7ed7de4781119eced07f5", id: 30000101, name: "Uhtafal", region_id: 10000001, region_name: "Derelik"}
            update(suggestions);
        },
        onSelect: function(item) {
            input2.value = item.name;
        }
    });

    /* --------------------------------------------------------------------------------------------------------------------------------- */


    /* Events 
    ---------------------------------------------------------------------------------------------------------------------------------------
    */
    $('button').on("mouseleave",function(){                                     // hide tool tips
            $(this).tooltip("hide");
    });

    $('[role=button]').on("mouseleave",function(){                              // hide tool tips
            $(this).tooltip("hide");
    });

    $('#toggle_legend').on('click', function(event) {                           // toggel legend
        position = $('#map_legend').position();
        if (position.left == -300){
            showLegend();
        }
        if (position.left == 0){
            hideLegend();
        }
    });

    $('#toggle_message_box').on('click', function(event) {                      // toggle message box
        if (user_map_settings.show_message_box == 1){
            hideMessageBox();
        } else {
            showMessageBox();
        }
    });

    $('#toggle_labels').on('click', function(event) {                           // toggle labels
        toggleLabels($(this));
    });

    $('#toggle_tooltips').on('click', function(event) {                         // toggle tooltips
        if (user_map_settings.show_tooltips == 1){
            hideTooltips();
        } else {
            showTooltips();
        }
    });

    $('#toggle_trails').on('click', function(event) {                           // toggle trails
        if (user_map_settings.show_trails == 1){
            hideTrails();
        } else {
            showTrails();
        }
    });

    $("#array_dump").on('click', function(){                                    // Dump Arrays
        console.log("alert_data", alert_data);
        console.log("alert_act_data", alert_act_data);
        console.log("user_map_settings: ", user_map_settings);
        console.log("user_settings: ", user_settings);
        console.log("move_alert", move_alert);
    });

    $('#save_map_settings').on('click', function() {                             // save users map settings
        const settings = {
            "discordId":    user.uid,
            "username":     user.username,
            "settings":     user_map_settings
        }
        socket.emit('SAVE_MAP_SETTINGS', settings, user.username);
    });
    /* --------------------------------------------------------------------------------------------------------------------------------- */


    /* socket.io functions
    delegate click event from the document as popovers are created dynamically and have initially no events bound - https://stackoverflow.com/questions/54618503/how-to-click-on-a-link-inside-the-data-content-of-a-pop-over
    ---------------------------------------------------------------------------------------------------------------------------------------
    */
    $(document).on("click", '[data-id="open_report"]', function(event) {        // Create Alert clicked
        event.preventDefault(); 
        resetForm($('#report'));      
        $('#report_enemy_modal').modal('show');     
        $('#5min').prop('checked',true);
    });

    $(document).on("click", '[data-id="green_report"]', function(event) {        // Create Alert clicked
        event.preventDefault(); 
        node_id             = $("#report_systemname").attr("data-node-id");
        node_name           = $("#report_systemname").attr("data-node-name");
        const DateTime = luxon.DateTime;
        const dateExpire =  DateTime.local().plus({ minutes: 5 }).toISO();
        message = {
            "id": node_id,
            "system": node_name,
            "type": "green",
            "number": 0,
            "loc": '', 
            "comment": '', 
            "shiptype" : {
                "u": 0,
                "f": 0,
                "d": 0,
                "c": 0,
                "bc": 0,
                "bs": 0,
                "i": 0
            },
            "gatecamp": false,
            "stationcamp": false,
            "bubble": false,
            "dateExpire": dateExpire,
            "discordId": user.uid,
            "avatar": user.avatar,
            "username": user.username,
            "discriminator": user.discriminator,
            "stars": user_settings.stars
        };

        socket.emit('SAVE_MSG', message, user.username);
        
        resetForm($('#report'));
        hidePopover($('circle[data-node-type="solar_system"]'))   
    });

    $(document).on("click", '[data-id="delete_report"]', function(event) {      // Archiv Alert clicked
        event.preventDefault();
        socket.emit('DEL_MSG', $(this).attr("data-msg-id"), user.username);
        var node_id = $(this).attr("data-node-id");
        refreshTooltips(node_id);
        var all_solar_systems = $('circle[data-node-type="solar_system"]');
        hidePopover(all_solar_systems);        
    });

    $(document).on("click", '[data-id="edit_report"]', function(event) {        // Edit Alert clicked
        event.preventDefault();
        var alert = alert_data.filter(item => item._id == $(this).attr("data-msg-id"));
        $("#report_unknown_count").val(alert[0].message.shiptype.u);
        $("#report_frigate_count").val(alert[0].message.shiptype.f);
        $("#report_destroyer_count").val(alert[0].message.shiptype.d);
        $("#report_cruiser_count").val(alert[0].message.shiptype.c);
        $("#report_bc_count").val(alert[0].message.shiptype.bc);
        $("#report_bs_count").val(alert[0].message.shiptype.bs);
        $("#report_barge_count").val(alert[0].message.shiptype.i);
        $("#report_location").val(alert[0].message.loc);
        $("#report_comment").val(alert[0].message.comment);
        $("#report_gatecamp").prop("checked", alert[0].message.gatecamp);
        $("#report_stationcamp").prop("checked", alert[0].message.stationcamp);
        $("#report_bubble").prop("checked", alert[0].message.bubble);
        $("#report_send").attr("data_type", "update");
        $("#report_send").attr("data-msg-id", $(this).attr("data-msg-id"));
        $('#5min').prop('checked',true);
        $('#report_enemy_modal').modal('show');             
    });

    $(document).on("click", '[data-id="confirm_report"]', function(event) {        // Edit Alert clicked
        event.preventDefault();
        var alert = alert_data.filter(item => item._id == $(this).attr("data-msg-id"));
        var message = alert[0].message;
        const msg_id = $(this).attr("data-msg-id");
        console.log(message);
        socket.emit('CONFIRM_MSG', msg_id, message, user.username);           
    });

    $(document).on("click", '[data-id="move_report"]', function(event) {        // Move Alert clicked
        event.preventDefault();
        drag_id = $(this).attr("data-msg-id");
        move_alert = alert_data.filter(item => item._id == drag_id);
        createDrag(drag_id);
        resetUI();          
    });

    $(document).on("mousemove", function(e) {                                   // Dragging
        if (typeof move_alert[0] !== "undefined") {
            drag_template.offset({'top': e.clientY + 5, 'left': e.clientX + 5 });
        }
    });

    $("#report").submit(function(e) {                                           // Report Form is sent
        e.preventDefault(); 
        msg_id              = $("#report_send").attr("data-msg-id");
        node_id             = $("#report_systemname").attr("data-node-id");
        node_name           = $("#report_systemname").attr("data-node-name");
        unknown_val         = $("#report_unknown_count").val();
        frigate_val         = $("#report_frigate_count").val();
        destroyer_val       = $("#report_destroyer_count").val();
        cruiser_val         = $("#report_cruiser_count").val();
        battlecruiser_val   = $("#report_bc_count").val();
        battleship_val      = $("#report_bs_count").val();
        miningbarge_val     = $("#report_barge_count").val();
        sum                 = Number(unknown_val) + Number(frigate_val) + Number(destroyer_val) + Number(cruiser_val) + Number(battlecruiser_val) + Number(battleship_val) + Number(miningbarge_val);
        at                  = $("#report_location").val();
        comment             = $("#report_comment").val();
        gatecamp            = $("#report_gatecamp").prop("checked");
        stationcamp         = $("#report_stationcamp").prop("checked");
        bubble              = $("#report_bubble").prop("checked");
        expire              = $('input[name="ExpireOptions"]:checked').val();        

        const DateTime = luxon.DateTime;
        const dateExpire =  DateTime.local().plus({ minutes: expire }).toISO();

        message = {
            "id": node_id,
            "system": node_name,
            "predecessors": [],
            "type": "enemy",
            "number": sum,
            "loc": at, 
            "comment": comment, 
            "shiptype" : {
                "u": unknown_val,
                "f": frigate_val,
                "d": destroyer_val,
                "c": cruiser_val,
                "bc": battlecruiser_val,
                "bs": battleship_val,
                "i": miningbarge_val
            },
            "gatecamp": gatecamp,
            "stationcamp": stationcamp,
            "bubble": bubble,
            "dateExpire": dateExpire,
            "discordId": user.uid,
            "avatar": user.avatar,
            "username": user.username,
            "discriminator": user.discriminator,
            "stars": user_settings.stars
        };
        var send_type = $("#report_send").attr("data_type");
        if(send_type == "save") {
            socket.emit('SAVE_MSG', message, user.username);
        }
        if(send_type == "update") {
            const orig_alert = alert_data.filter(item => item._id == msg_id);
            console.log(orig_alert);
            message.predecessors = orig_alert[0].message.predecessors;
            socket.emit('EDIT_MSG', msg_id, message, user.username);
        }
        resetForm($('#report'));
        $('#report_enemy_modal').modal('hide'); 
        hidePopover($('circle[data-node-type="solar_system"]'))                                                              
        
        return false;
    });

    $('#settings_send').on('click', function() {                             // save user settings
        event.preventDefault(); 

        user_settings.username = $('#display_name').val();
        user_settings.stars = $('#stars').val();
        user_settings.revert_y_axis = $('#revert_y_axis').prop('checked');
        user_settings.home_base = $('#settings_autocomplete').val();
        user_settings.jump_range = $('#jump_range').val();
        user_settings.audio_alert = $('#audio_alert').prop('checked');
        
        socket.emit('SAVE_USER_SETTINGS', user_settings, user.username);
        $('#user_settings_modal').modal('toggle');
    });

    socket.on('SEND_MSG', function(msg_act, msg){                                       //recieving single messages    
        alert_data.push(msg);
        alert_act_data.push(msg_act); 
        updateMessageBox(alert_act_data);
        updateData();   
    });

    socket.on('SEND_MSG_ALL', function(msg){                                            //recieving ALL messages
        alert_data = msg;
        $('circle[data-node-type="solar_system"]').each(function (index){
            content = createPopoverHeader($(this));  
            $(this).attr("data-content", content);
        });
        $('circle[data-node-type="solar_system"]').tooltip('hide');
        $('circle[data-node-type="solar_system"]').popover('hide');
        d3.selectAll('circle[data-node-type="solar_system"]').style("fill", "#000000");
        d3.selectAll('path').style("fill", "#191d21");
        d3.selectAll('path[data-node-rid="' + region + '"]').style("fill", "#1c2c3d");
        updateData();   
    });

    socket.on('SEND_MSG_ACT_ALL', function(msg_act){                                    //recieving ALL activity messages
        alert_act_data = msg_act;
        updateMessageBox(alert_act_data);
    });

    socket.on('GET_SYS_REG_DATA', function(msg){                                        //recieving ALL system and region data
            sys_reg_data = msg;  
            region_name = getRegionNameFromId(region);
            $('#save_map_settings').attr("data-original-title", "Save current position and on/off settings for " + region_name);
    });

    socket.on('SEND_USER_SETTINGS', function(settings){                                  //recieving map settings
        if (typeof settings[0] !== 'undefined'){
            user_settings = settings[0];
        }
    });
    /* socket.io functions
    ---------------------------------------------------------------------------------------------------------------------------------------
    */

    /* regular updates on popovers and tooltips to update DateTime
    ---------------------------------------------------------------------------------------------------------------------------------------
    */
    function updateDateTime(){
        updateData();
        updateMessageBox(alert_act_data);
    }
    setInterval(updateDateTime, 1000 * 10); // every 10 sec
    /* regular updates on popovers and tooltips to update DateTime
    ---------------------------------------------------------------------------------------------------------------------------------------
    */
});


    // fill dropdown
    // regions = [ {"id":10000001,"name":"Derelik"},
    //             {"id":10000002,"name":"The Forge"},
    //             {"id":10000003,"name":"Vale of the Silent"},
    //             {"id":10000004,"name":"UUA-F4"},
    //             {"id":10000005,"name":"Detorid"},
    //             {"id":10000006,"name":"Wicked Creek"},
    //             {"id":10000007,"name":"Cache"},
    //             {"id":10000008,"name":"Scalding Pass"},
    //             {"id":10000009,"name":"Insmother"},
    //             {"id":10000010,"name":"Tribute"},
    //             {"id":10000011,"name":"Great Wildlands"},
    //             {"id":10000012,"name":"Curse"},
    //             {"id":10000013,"name":"Malpais"},
    //             {"id":10000014,"name":"Catch"},
    //             {"id":10000015,"name":"Venal"},
    //             {"id":10000016,"name":"Lonetrek"},
    //             {"id":10000017,"name":"J7HZ-F"},
    //             {"id":10000018,"name":"The Spire"},
    //             {"id":10000019,"name":"A821-A"},
    //             {"id":10000020,"name":"Tash-Murkon"},
    //             {"id":10000021,"name":"Outer Passage"},
    //             {"id":10000022,"name":"Stain"},
    //             {"id":10000023,"name":"Pure Blind"},
    //             {"id":10000025,"name":"Immensea"},
    //             {"id":10000027,"name":"Etherium Reach"},
    //             {"id":10000028,"name":"Molden Heath"},
    //             {"id":10000029,"name":"Geminate"},
    //             {"id":10000030,"name":"Heimatar"},
    //             {"id":10000031,"name":"Impass"},
    //             {"id":10000032,"name":"Sinq Laison"},
    //             {"id":10000033,"name":"The Citadel"},
    //             {"id":10000034,"name":"The Kalevala Expanse"},
    //             {"id":10000035,"name":"Deklein"},
    //             {"id":10000036,"name":"Devoid"},
    //             {"id":10000037,"name":"Everyshore"},
    //             {"id":10000038,"name":"The Bleak Lands"},
    //             {"id":10000039,"name":"Esoteria"},
    //             {"id":10000040,"name":"Oasa"},
    //             {"id":10000041,"name":"Syndicate"},
    //             {"id":10000042,"name":"Metropolis"},
    //             {"id":10000043,"name":"Domain"},
    //             {"id":10000044,"name":"Solitude"},
    //             {"id":10000045,"name":"Tenal"},
    //             {"id":10000046,"name":"Fade"},
    //             {"id":10000047,"name":"Providence"},
    //             {"id":10000048,"name":"Placid"},
    //             {"id":10000049,"name":"Khanid"},
    //             {"id":10000050,"name":"Querious"},
    //             {"id":10000051,"name":"Cloud Ring"},
    //             {"id":10000052,"name":"Kador"},
    //             {"id":10000053,"name":"Cobalt Edge"},
    //             {"id":10000054,"name":"Aridia"},
    //             {"id":10000055,"name":"Branch"},
    //             {"id":10000056,"name":"Feythabolis"},
    //             {"id":10000057,"name":"Outer Ring"},
    //             {"id":10000058,"name":"Fountain"},
    //             {"id":10000059,"name":"Paragon Soul"},
    //             {"id":10000060,"name":"Delve"},
    //             {"id":10000061,"name":"Tenerifis"},
    //             {"id":10000062,"name":"Omist"},
    //             {"id":10000063,"name":"Period Basis"},
    //             {"id":10000064,"name":"Essence"},
    //             {"id":10000065,"name":"Kor-Azor"},
    //             {"id":10000066,"name":"Perrigen Falls"},
    //             {"id":10000067,"name":"Genesis"},
    //             {"id":10000068,"name":"Verge Vendor"},
    //             {"id":10000069,"name":"Black Rise"}];

    // regions.sort((a,b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0));                                // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value
    // for(i in regions)
    // {
    //     $('<a class="dropdown-item"></a>').attr("href","/dashboard/region?id="+regions[i].id).html(regions[i].name).appendTo('#dropdown_select'); 
    // } 

</script>

<%- include('partials/footer') -%>